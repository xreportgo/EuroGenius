// Script optimisé pour la production
document.addEventListener('DOMContentLoaded', function() {
  // Gestion du menu mobile
  const menuToggle = document.querySelector('.menu-toggle');
  const navMenu = document.querySelector('nav ul');
  
  if (menuToggle) {
    menuToggle.addEventListener('click', function() {
      navMenu.classList.toggle('active');
    });
  }
  
  // Animation au défilement
  const animateOnScroll = function() {
    const elements = document.querySelectorAll('.fade-in');
    
    elements.forEach(element => {
      const elementPosition = element.getBoundingClientRect().top;
      const windowHeight = window.innerHeight;
      
      if (elementPosition < windowHeight - 50) {
        element.classList.add('visible');
      }
    });
  };
  
  // Initialisation des animations
  animateOnScroll();
  window.addEventListener('scroll', animateOnScroll);
  
  // Chargement différé des images
  const lazyImages = document.querySelectorAll('.lazy-load');
  
  if ('IntersectionObserver' in window) {
    const imageObserver = new IntersectionObserver((entries, observer) => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          const img = entry.target;
          img.src = img.dataset.src;
          img.classList.add('loaded');
          imageObserver.unobserve(img);
        }
      });
    });
    
    lazyImages.forEach(img => {
      imageObserver.observe(img);
    });
  } else {
    // Fallback pour les navigateurs qui ne supportent pas IntersectionObserver
    lazyImages.forEach(img => {
      img.src = img.dataset.src;
      img.classList.add('loaded');
    });
  }
  
  // Gestion des formulaires
  const forms = document.querySelectorAll('form');
  
  forms.forEach(form => {
    form.addEventListener('submit', function(e) {
      e.preventDefault();
      
      // Simulation d'envoi de formulaire
      const submitButton = form.querySelector('[type="submit"]');
      if (submitButton) {
        submitButton.disabled = true;
        submitButton.textContent = 'Traitement en cours...';
        
        // Réinitialisation après 2 secondes (simulation)
        setTimeout(() => {
          submitButton.disabled = false;
          submitButton.textContent = 'Envoyé !';
          form.reset();
          
          // Message de confirmation
          const confirmationMessage = document.createElement('div');
          confirmationMessage.className = 'confirmation-message';
          confirmationMessage.textContent = 'Votre demande a été envoyée avec succès !';
          form.appendChild(confirmationMessage);
          
          // Suppression du message après 3 secondes
          setTimeout(() => {
            confirmationMessage.remove();
            submitButton.textContent = 'Envoyer';
          }, 3000);
        }, 2000);
      }
    });
  });
  
  // Gestion du thème (clair/sombre)
  const themeToggle = document.querySelector('.theme-toggle');
  
  if (themeToggle) {
    // Vérification des préférences utilisateur
    const prefersDarkScheme = window.matchMedia('(prefers-color-scheme: dark)');
    
    // Application du thème initial
    if (localStorage.getItem('theme') === 'dark' || (!localStorage.getItem('theme') && prefersDarkScheme.matches)) {
      document.body.classList.add('dark-theme');
    }
    
    themeToggle.addEventListener('click', function() {
      document.body.classList.toggle('dark-theme');
      
      // Sauvegarde de la préférence
      if (document.body.classList.contains('dark-theme')) {
        localStorage.setItem('theme', 'dark');
      } else {
        localStorage.setItem('theme', 'light');
      }
    });
  }
  
  // Initialisation des tooltips
  const tooltips = document.querySelectorAll('[data-tooltip]');
  
  tooltips.forEach(tooltip => {
    tooltip.addEventListener('mouseenter', function() {
      const tooltipText = this.dataset.tooltip;
      const tooltipElement = document.createElement('div');
      tooltipElement.className = 'tooltip';
      tooltipElement.textContent = tooltipText;
      
      document.body.appendChild(tooltipElement);
      
      const rect = this.getBoundingClientRect();
      tooltipElement.style.top = rect.bottom + 10 + 'px';
      tooltipElement.style.left = rect.left + (rect.width / 2) - (tooltipElement.offsetWidth / 2) + 'px';
    });
    
    tooltip.addEventListener('mouseleave', function() {
      const tooltipElement = document.querySelector('.tooltip');
      if (tooltipElement) {
        tooltipElement.remove();
      }
    });
  });
});
